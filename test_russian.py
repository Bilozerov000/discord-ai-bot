#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ STT —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
"""

import requests
import tempfile
import os
from gtts import gTTS

def test_russian_phrases():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä—É—Å—Å–∫–∏—Ö —Ñ—Ä–∞–∑"""
    
    test_phrases = [
        "–ì–æ–ª–æ–≤–∞, –∫–∞–∫ –¥–µ–ª–∞?",
        "–ì–æ–ª–æ–≤–∞—Å—Ç–∏–∫, —Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç",
        "–ß–∞—Ç–±–æ—Ç, –∫–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?",
        "–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –û–ª–µ–∫—Å–∏–π",
        "–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏",
        "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å?",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏...")
    print("=" * 50)
    
    for i, phrase in enumerate(test_phrases, 1):
        print(f"\n{i}. –¢–µ—Å—Ç —Ñ—Ä–∞–∑—ã: '{phrase}'")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_audio:
                tts = gTTS(text=phrase, lang='ru')
                tts.save(tmp_audio.name)
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                with open(tmp_audio.name, 'rb') as audio_file:
                    files = {'file': audio_file}
                    data = {'language': 'ru'}
                    
                    response = requests.post('http://localhost:5001/v1/audio/transcriptions', 
                                           files=files, data=data)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(tmp_audio.name)
                
                if response.status_code == 200:
                    result = response.json()
                    detected_text = result['text'].strip()
                    language = result.get('language', 'unknown')
                    
                    print(f"   ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{detected_text}'")
                    print(f"   üî§ –Ø–∑—ã–∫: {language}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                    similarity = calculate_similarity(phrase.lower(), detected_text.lower())
                    print(f"   üìä –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.1f}%")
                    
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
                    
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

def calculate_similarity(original, detected):
    """–ü—Ä–æ—Å—Ç–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫"""
    if not original or not detected:
        return 0.0
    
    # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    import re
    original = re.sub(r'[^\w\s]', '', original).strip()
    detected = re.sub(r'[^\w\s]', '', detected).strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Å–ª–æ–≤–∞
    orig_words = set(original.split())
    det_words = set(detected.split())
    
    if not orig_words:
        return 0.0
        
    common_words = orig_words.intersection(det_words)
    return (len(common_words) / len(orig_words)) * 100

def test_bot_triggers():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ –±–æ—Ç–∞"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤...")
    print("=" * 50)
    
    triggers = ["–ì–æ–ª–æ–≤–∞", "–ì–æ–ª–æ–≤–∞—Å—Ç–∏–∫", "–ß–∞—Ç–±–æ—Ç"]
    
    for trigger in triggers:
        phrase = f"{trigger}, –ø—Ä–∏–≤–µ—Ç!"
        print(f"\n–¢–µ—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞: '{phrase}'")
        
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_audio:
                tts = gTTS(text=phrase, lang='ru')
                tts.save(tmp_audio.name)
                
                with open(tmp_audio.name, 'rb') as audio_file:
                    files = {'file': audio_file}
                    data = {'language': 'ru'}
                    
                    response = requests.post('http://localhost:5001/v1/audio/transcriptions', 
                                           files=files, data=data)
                
                os.unlink(tmp_audio.name)
                
                if response.status_code == 200:
                    result = response.json()
                    detected = result['text'].strip()
                    print(f"   ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{detected}'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                    if trigger.lower() in detected.lower():
                        print(f"   üéØ –¢—Ä–∏–≥–≥–µ—Ä '{trigger}' —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!")
                    else:
                        print(f"   ‚ö†Ô∏è  –¢—Ä–∏–≥–≥–µ—Ä '{trigger}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
                    
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    print("üá∑üá∫ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ Discord –±–æ—Ç–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    try:
        response = requests.get('http://localhost:5001/health', timeout=5)
        if response.status_code == 200:
            print("‚úÖ STT —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå STT —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            exit(1)
    except:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ STT —Å–µ—Ä–≤–µ—Ä—É")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_russian_phrases()
    test_bot_triggers()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –°–æ–≤–µ—Ç—ã:")
    print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: '–ì–æ–ª–æ–≤–∞', '–ì–æ–ª–æ–≤–∞—Å—Ç–∏–∫', '–ß–∞—Ç–±–æ—Ç'")
    print("- –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ")
    print("- –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")
